import math  # Importa funciones matem√°ticas como logaritmos y redondeo
from scipy.stats import chi2  # Importa la distribuci√≥n chi-cuadrado para obtener valores cr√≠ticos

# Funci√≥n que implementa el M√©todo Congruencial Mixto
def metodo_congruencial_mixto(semilla, a, c, m, cantidad):
    numeros = []  # Lista para almacenar los n√∫meros normalizados
    x = semilla  # Se inicializa con la semilla ingresada

    print("\nüìò Detalles de cada iteraci√≥n:")
    for i in range(cantidad):  # Repite 'cantidad' veces
        x = (a * x + c) % m  # F√≥rmula del m√©todo congruencial mixto: Xn+1 = (aXn + c) mod m
        r = x / m  # Se normaliza el valor a un n√∫mero entre 0 y 1
        numeros.append(r)  # Se guarda el n√∫mero generado

        # Mostrar paso a paso c√≥mo se gener√≥ cada n√∫mero
        print(f"\nIteraci√≥n {i+1}:")
        print(f"  x{i} = ({a} * {semilla} + {c}) mod {m} = {x}")
        print(f"  r{i+1} = {x} / {m} = {r:.4f}")

        semilla = x  # Actualiza la semilla para usarla en la siguiente iteraci√≥n

    return numeros  # Retorna la lista de n√∫meros generados

# Funci√≥n para realizar la prueba de Chi-Cuadrado
def prueba_chi_cuadrado(valores_normalizados):
    n = len(valores_normalizados)  # Cantidad de n√∫meros generados
    k = math.ceil(math.log2(n) + 1)  # Cantidad de intervalos seg√∫n la regla de Sturges
    fe = n / k  # Frecuencia esperada en cada intervalo
    intervalos = [0] * k  # Lista con k intervalos inicializados en 0

    for valor in valores_normalizados:
        indice = min(int(valor * k), k - 1)  # Determina en qu√© intervalo cae el valor
        intervalos[indice] += 1  # Incrementa la frecuencia observada en ese intervalo

    # Calcula el estad√≠stico de chi-cuadrado: ‚àë((fo - fe)^2 / fe)
    chi_cuadrado = sum((fo - fe) ** 2 / fe for fo in intervalos)

    print("\nüìä Prueba de Chi-Cuadrado:")
    for i in range(k):
        print(f"  Intervalo {i+1}: Observado = {intervalos[i]}, Esperado = {fe:.2f}")

    print(f"\nEstad√≠stico Chi-Cuadrado = {chi_cuadrado:.4f}")
    return chi_cuadrado, k  # Retorna el estad√≠stico y la cantidad de intervalos

# Inicio del programa principal
print("üßÆ M√©todo Congruencial Mixto")
try:
    # Solicita al usuario los par√°metros necesarios
    semilla = int(input("Ingrese la semilla (X0): "))
    a = int(input("Ingrese el multiplicador (a): "))
    c = int(input("Ingrese la constante aditiva (c): "))
    m = int(input("Ingrese el m√≥dulo (m): "))
    cantidad = int(input("¬øCu√°ntos n√∫meros aleatorios desea generar?: "))

    # Llama a la funci√≥n generadora
    resultado = metodo_congruencial_mixto(semilla, a, c, m, cantidad)

    # Muestra los n√∫meros generados
    print("\nüé≤ N√∫meros pseudoaleatorios generados:")
    for i, num in enumerate(resultado, 1):
        print(f"  R{i} = {num:.4f}")

    # Llama a la funci√≥n para hacer la prueba de chi-cuadrado
    chi, k = prueba_chi_cuadrado(resultado)
    alfa = 0.05  # Nivel de significancia
    valor_critico = chi2.ppf(1 - alfa, k - 1)  # Calcula el valor cr√≠tico con scipy

    print(f"\nValor cr√≠tico (Œ± = {alfa}, gl = {k-1}) = {valor_critico:.4f}")

    # Compara el estad√≠stico con el valor cr√≠tico
    if chi < valor_critico:
        print("‚úÖ Los n√∫meros PASAN la prueba de Chi-Cuadrado.")
    else:
        print("‚ùå Los n√∫meros NO pasan la prueba de Chi-Cuadrado.")

except ValueError:
    # Si el usuario ingresa un dato no num√©rico
    print("‚ùå Error: Ingrese solo valores num√©ricos enteros.")

